// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: metrics_service.proto

package service

import (
	context "context"
	model "github.com/c0dered273/go-adv-metrics/internal/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MetricsService_Get_FullMethodName     = "/proto.MetricsService/Get"
	MetricsService_GetAll_FullMethodName  = "/proto.MetricsService/GetAll"
	MetricsService_Save_FullMethodName    = "/proto.MetricsService/Save"
	MetricsService_SaveAll_FullMethodName = "/proto.MetricsService/SaveAll"
)

// MetricsServiceClient is the client API for MetricsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricsServiceClient interface {
	Get(ctx context.Context, in *model.GetMetricRequest, opts ...grpc.CallOption) (*model.GetMetricResponse, error)
	GetAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*model.GetAllMetricsResponse, error)
	Save(ctx context.Context, in *model.Metric, opts ...grpc.CallOption) (*model.Status, error)
	SaveAll(ctx context.Context, in *model.Metrics, opts ...grpc.CallOption) (*model.Status, error)
}

type metricsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsServiceClient(cc grpc.ClientConnInterface) MetricsServiceClient {
	return &metricsServiceClient{cc}
}

func (c *metricsServiceClient) Get(ctx context.Context, in *model.GetMetricRequest, opts ...grpc.CallOption) (*model.GetMetricResponse, error) {
	out := new(model.GetMetricResponse)
	err := c.cc.Invoke(ctx, MetricsService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsServiceClient) GetAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*model.GetAllMetricsResponse, error) {
	out := new(model.GetAllMetricsResponse)
	err := c.cc.Invoke(ctx, MetricsService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsServiceClient) Save(ctx context.Context, in *model.Metric, opts ...grpc.CallOption) (*model.Status, error) {
	out := new(model.Status)
	err := c.cc.Invoke(ctx, MetricsService_Save_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsServiceClient) SaveAll(ctx context.Context, in *model.Metrics, opts ...grpc.CallOption) (*model.Status, error) {
	out := new(model.Status)
	err := c.cc.Invoke(ctx, MetricsService_SaveAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsServiceServer is the server API for MetricsService service.
// All implementations must embed UnimplementedMetricsServiceServer
// for forward compatibility
type MetricsServiceServer interface {
	Get(context.Context, *model.GetMetricRequest) (*model.GetMetricResponse, error)
	GetAll(context.Context, *emptypb.Empty) (*model.GetAllMetricsResponse, error)
	Save(context.Context, *model.Metric) (*model.Status, error)
	SaveAll(context.Context, *model.Metrics) (*model.Status, error)
	mustEmbedUnimplementedMetricsServiceServer()
}

// UnimplementedMetricsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMetricsServiceServer struct {
}

func (UnimplementedMetricsServiceServer) Get(context.Context, *model.GetMetricRequest) (*model.GetMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedMetricsServiceServer) GetAll(context.Context, *emptypb.Empty) (*model.GetAllMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedMetricsServiceServer) Save(context.Context, *model.Metric) (*model.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedMetricsServiceServer) SaveAll(context.Context, *model.Metrics) (*model.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveAll not implemented")
}
func (UnimplementedMetricsServiceServer) mustEmbedUnimplementedMetricsServiceServer() {}

// UnsafeMetricsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsServiceServer will
// result in compilation errors.
type UnsafeMetricsServiceServer interface {
	mustEmbedUnimplementedMetricsServiceServer()
}

func RegisterMetricsServiceServer(s grpc.ServiceRegistrar, srv MetricsServiceServer) {
	s.RegisterService(&MetricsService_ServiceDesc, srv)
}

func _MetricsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServiceServer).Get(ctx, req.(*model.GetMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServiceServer).GetAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsService_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.Metric)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServiceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsService_Save_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServiceServer).Save(ctx, req.(*model.Metric))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsService_SaveAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.Metrics)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServiceServer).SaveAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsService_SaveAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServiceServer).SaveAll(ctx, req.(*model.Metrics))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricsService_ServiceDesc is the grpc.ServiceDesc for MetricsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MetricsService",
	HandlerType: (*MetricsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _MetricsService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _MetricsService_GetAll_Handler,
		},
		{
			MethodName: "Save",
			Handler:    _MetricsService_Save_Handler,
		},
		{
			MethodName: "SaveAll",
			Handler:    _MetricsService_SaveAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metrics_service.proto",
}
